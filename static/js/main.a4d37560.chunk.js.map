{"version":3,"sources":["CheckListObject.js","components/ListTemple.jsx","App.js","reportWebVitals.js","redux/reducers/someReducer.js","redux/reducers/allReducer.js","index.js"],"names":["PhaseOneList","phaseName","tasks","index","id","taskName","isChecked","PhaseTwoList","PhaseThreeList","ListTemple","data","list","useState","phaseObj","setPhaseObj","localStorage","length","console","log","setItem","JSON","stringify","useEffect","obj","parse","getItem","map","item","defaultChecked","type","onChange","e","CheckBoxStatus","input","document","getElementById","find","i","setAttribute","handleChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","state","someReducer","action","rootReducers","combineReducers","one","composeEnchancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a4d37560.chunk.js","sourcesContent":["export const PhaseOneList = [\n    {phaseName:\"Phase №1\", \n        tasks:[\n            {index:0,id:\"Ph-1,T-1\",taskName:\"task\", isChecked:false},\n            {index:1, id:\"Ph-1,T-2\", taskName:\"task\", isChecked:false}]\n        }]\n\nexport const PhaseTwoList = [\n    {phaseName:\"Phase №2\", \n        tasks:[\n            {index:0, id:\"Ph-2,T-1\",taskName:\"task\", isChecked:false},\n            {index:1, id:\"Ph-2,T-2\", taskName:\"task\", isChecked:false},]\n        }]\n\nexport const PhaseThreeList = [\n    {phaseName:\"Phase №3\", \n        tasks:[\n            {index:0, id:\"Ph-3,T-1\",taskName:\"task\", isChecked:false},\n            {index:1, id:\"Ph-3,T-2\", taskName:\"task\", isChecked:false}]\n        }]","import { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nexport const ListTemple = ({data}) => {\n    const [list] = data\n    const [phaseObj, setPhaseObj] = useState({})\n\n    const handleChange = (e) => {\n        let CheckBoxStatus = JSON.parse(localStorage.getItem(phaseObj.phaseName))\n        const input = document.getElementById(`${e}`)\n        console.log(e);\n        CheckBoxStatus.tasks.find((item)=>{\n            if(item.id === e){\n                if(item.isChecked === false){\n                    for (var i = 0; i < CheckBoxStatus.tasks.length; i++) {\n                        if(e === CheckBoxStatus.tasks[i].id){\n                            CheckBoxStatus.tasks[i].isChecked = true;\n                            break;\n                        }\n                    }\n                    localStorage.setItem(phaseObj.phaseName, JSON.stringify(CheckBoxStatus))\n                    input.setAttribute(\"defaultChecked\", true)\n                    \n                }else{\n                    for (var i = 0; i < CheckBoxStatus.tasks.length; i++) {\n                        if(e === CheckBoxStatus.tasks[i].id){\n                            CheckBoxStatus.tasks[i].isChecked = false;\n                            break;\n                        }\n                    }\n                    localStorage.setItem(phaseObj.phaseName, JSON.stringify(CheckBoxStatus))\n                    input.setAttribute(\"defaultChecked\", false)\n                }\n            }\n        })\n        // const input = document.getElementById(`${e}`)\n        // if(CheckBoxStatus.checkStatus){\n        //   localStorage.setItem(e, JSON.stringify({checkStatus:false}))\n        //   input.setAttribute(\"defaultChecked\", !CheckBoxStatus.checkStatus)\n        //   console.log(input);\n        // }else{\n        //   localStorage.setItem(e, JSON.stringify({checkStatus:true}))\n        //   input.setAttribute(\"defaultChecked\", !CheckBoxStatus.checkStatus)\n        //   console.log(input);\n        // }\n    }\n\n    if (localStorage.length === 3) {\n        console.log(\"lol\");\n      }else{\n        localStorage.setItem(list.phaseName , JSON.stringify(list));\n    }\n\n    useEffect(()=>{\n        const obj = JSON.parse(localStorage.getItem(list.phaseName))\n        setPhaseObj(obj)\n    },[list.phaseName])\n\n    return (\n        <div>\n            <h1>{phaseObj.phaseName}</h1>\n            <section>\n                {phaseObj.tasks && (\n                    phaseObj.tasks.map((item)=>{\n                        const {id, taskName, isChecked} = item\n                        return (\n                            <div key={id}>\n                                <input id={id} defaultChecked={isChecked} type=\"checkbox\" onChange={()=>{handleChange(id)}}/><span>{taskName}</span>\n                            </div>)\n                    })\n                )}\n            </section>\n        </div>\n    )\n}","import {React} from \"react\"\nimport {PhaseOneList, PhaseTwoList, PhaseThreeList} from \"./CheckListObject\"\nimport {ListTemple} from \"./components/ListTemple\"\n\nfunction App(){\n\n  return (\n    <div className=\"App\">\n      <h1>My startup progress</h1>\n      <section>\n        <ListTemple data={PhaseOneList}/>\n        <ListTemple data={PhaseTwoList}/>\n        <ListTemple data={PhaseThreeList}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\n    state:[]\n}\n\nconst someReducer = (state=initState, action) => {\n    switch (action.type){\n        default:\n            return {...state}\n    }\n}\n\nexport default someReducer","import {combineReducers} from \"redux\"\nimport someReducer from \"./someReducer\"\n\nconst rootReducers = combineReducers({\n    one: someReducer,\n})\n\nexport default rootReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//REDUX\n  import rootReducers from \"./redux/reducers/allReducer\"\n  import {Provider} from \"react-redux\"\n  import {createStore, applyMiddleware, compose} from \"redux\"\n  import thunk from \"redux-thunk\" \n\n  const composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  const store = createStore(rootReducers , composeEnchancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}